out = mrtree(labelmat)
plot_tree(labelmat=out$labelmat.mrtree, ref.labels=ref.labels, plot.piechart = TRUE)
n = nrow(labelmat)
p = ncol(labelmat)
# save in data.tree format
labelmat = matrix(paste(matrix(rep(colnames(labelmat), each = n), nrow = n),
labelmat, sep = "-"), nrow = n)
df = as.data.frame(unique(labelmat), stringsAsFactors = F)
is.null(colnames(labelmat))
ks = apply(labelmat, 2, function(x) length(unique(x)))
colnames(labelmat) = paste0("K", ks)
colnames(labelmat) = paste0("K", ks)
str(labelmat)
n = nrow(labelmat)
p = ncol(labelmat)
# save in data.tree format
labelmat = matrix(paste(matrix(rep(colnames(labelmat), each = n), nrow = n),
labelmat, sep = "-"), nrow = n)
df = as.data.frame(unique(labelmat), stringsAsFactors = F)
df$pathString = apply(df, 1, function(x) paste(c("all", x), collapse = "/"))
tree.datatree = data.tree::as.Node(df)
# phylo tree for visualization
tree.phylo = data.tree::as.phylo.Node(tree.datatree)
# reference type per node
ord = data.frame(node = 1:(ape::Ntip(tree.phylo) + ape::Nnode(tree.phylo)), row.names = c(tree.phylo$tip.label,
tree.phylo$node.label))
df = data.frame(labelmat = c(labelmat), ref.labels = rep(ref.labels, p))
df = rbind(df, data.frame(labelmat = "all", ref.labels = ref.labels))
if (length(unique(colnames(labelmat)))!=ncol(labelmat)) {
# repeated colnames
colnames(labelmat) = paste0("layer", 1:ncol(labelmat))
prefix = "layer"
}
str(labelmat)
# setup
set.seed(1)
#             ()
#       ()          ()
#       ()        ()  ()
#     ()  ()      ()  ()
# generat the hierarchical clustering structure
labelmat = matrix(NA, nrow=200, ncol=4)
labelmat[1:200, 1] = 1
labelmat[1:100, 2] = 1
labelmat[101:200, 2] = 2
labelmat[1:100, 3] = 1
labelmat[101:150, 3] = 2
labelmat[151:200, 3] = 3
labelmat[1:50, 4] = 1
labelmat[51:100, 4] = 2
labelmat[101:150, 4] = 3
labelmat[151:200, 4] = 4
# adding some random noise
labelmat[sample(10),2] = sample(1:2, 10, replace = TRUE)
labelmat[sample(10),3] = sample(1:3, 10, replace = TRUE)
labelmat[sample(10),4] = sample(1:4, 10, replace = TRUE)
ref.labels = rep(1:4, each=50)
if (is.null(colnames(labelmat))) {
ks = apply(labelmat, 2, function(x) length(unique(x)))
colnames(labelmat) = paste0("K", ks)
}
str(lablemat)
str(labelmat)
if (length(unique(colnames(labelmat)))!=ncol(labelmat)) {
# repeated colnames
colnames(labelmat) = paste0("layer", 1:ncol(labelmat))
prefix = "layer"
}
n = nrow(labelmat)
p = ncol(labelmat)
# save in data.tree format
labelmat = matrix(paste(matrix(rep(colnames(labelmat), each = n), nrow = n),
labelmat, sep = "-"), nrow = n)
df = as.data.frame(unique(labelmat), stringsAsFactors = F)
df$pathString = apply(df, 1, function(x) paste(c("all", x), collapse = "/"))
tree.datatree = data.tree::as.Node(df)
# phylo tree for visualization
tree.phylo = data.tree::as.phylo.Node(tree.datatree)
tree.phylo
# reference type per node
ord = data.frame(node = 1:(ape::Ntip(tree.phylo) + ape::Nnode(tree.phylo)), row.names = c(tree.phylo$tip.label,
tree.phylo$node.label))
1:(ape::Ntip(tree.phylo) + ape::Nnode(tree.phylo))
c(tree.phylo$tip.label,
tree.phylo$node.label)
plot( tree.phylo)
# setup
set.seed(1)
#             ()
#       ()          ()
#       ()        ()  ()
#     ()  ()      ()  ()
# generat the hierarchical clustering structure
clusterings = matrix(NA, nrow=200, ncol=4)
clusterings[1:200, 1] = 1
clusterings[1:100, 2] = 1
clusterings[101:200, 2] = 2
clusterings[1:100, 3] = 1
clusterings[101:150, 3] = 2
clusterings[151:200, 3] = 3
clusterings[1:50, 4] = 1
clusterings[51:100, 4] = 2
clusterings[101:150, 4] = 3
clusterings[151:200, 4] = 4
# adding some random noise
clusterings[sample(10),2] = sample(1:2, 10, replace = TRUE)
clusterings[sample(10),3] = sample(1:3, 10, replace = TRUE)
clusterings[sample(10),4] = sample(1:4, 10, replace = TRUE)
ref.labels = rep(1:4, each=50
)
out = mrtree(clusterings)
labelmat=out$labelmat.mrtree
if (is.null(colnames(labelmat))) {
ks = apply(labelmat, 2, function(x) length(unique(x)))
colnames(labelmat) = paste0("K", ks)
}
if (length(unique(colnames(labelmat)))!=ncol(labelmat)) {
# repeated colnames
colnames(labelmat) = paste0("layer", 1:ncol(labelmat))
prefix = "layer"
}
if (is.null(ref.labels)) {
ref.labels = rep("", nrow(labelmat))
show.ref.labels = F
draw.pie.chart = F
} else {
ref.labels = as.character(ref.labels)
ref.labels = gsub("-", "_", ref.labels)
}
label.order = sort(unique(ref.labels))
n = nrow(labelmat)
p = ncol(labelmat)
# save in data.tree format
labelmat = matrix(paste(matrix(rep(colnames(labelmat), each = n), nrow = n),
labelmat, sep = "-"), nrow = n)
df = as.data.frame(unique(labelmat), stringsAsFactors = F)
df$pathString = apply(df, 1, function(x) paste(c("all", x), collapse = "/"))
tree.datatree = data.tree::as.Node(df)
# phylo tree for visualization
tree.phylo = data.tree::as.phylo.Node(tree.datatree)
plot(tree.phylo)
# reference type per node
ord = data.frame(node = 1:(ape::Ntip(tree.phylo) + ape::Nnode(tree.phylo)), row.names = c(tree.phylo$tip.label,
tree.phylo$node.label))
ord
df = data.frame(labelmat = c(labelmat), ref.labels = rep(ref.labels, p))
str(df)
df = rbind(df, data.frame(labelmat = "all", ref.labels = ref.labels))
str(df)
# calculate per type percentage
pct = aggregate(as.factor(df$ref.labels), by = list(node = df$labelmat), FUN = function(x) {
t = table(x)
t/sum(t)
})
str(pct)
pct
as.factor(df$ref.labels)
pct$x
pct$node
# calculate per type percentage
pct = aggregate(as.factor(df$ref.labels), by = list(node = df$labelmat), FUN = function(x) {
t = table(x)
t/sum(t)
})
pct
pct = data.frame(pct$x, row.names = pct$node, stringsAsFactors = F)
pct
ord
pct = transform(merge(pct, ord, by = "row.names", all = TRUE), row.names = Row.names,
Row.names = NULL)  # use transform to remove the rownames
pct
# set the node size
nodesize = aggregate(df$labelmat, by = list(node = df$labelmat), FUN = function(x) length(x))
nodesize
s
nodesize = data.frame(nodesize = nodesize$x/max(nodesize$x), node = ord[as.character(nodesize$node),
], row.names = ord[as.character(nodesize$node), ])
nodesize$nodesize = nodesize$nodesize^(1/8) * node.size  # rescale to reduce the difference
nodesize = data.frame(nodesize = nodesize$x/max(nodesize$x), node = ord[as.character(nodesize$node),
], row.names = ord[as.character(nodesize$node), ])
# set the node size
nodesize = aggregate(df$labelmat, by = list(node = df$labelmat), FUN = function(x) length(x))
nodesize = data.frame(nodesize = nodesize$x/max(nodesize$x), node = ord[as.character(nodesize$node),
], row.names = ord[as.character(nodesize$node), ])
nodesize$nodesize = nodesize$nodesize^(1/8) * node.size  # rescale to reduce the difference
node.size=1
nodesize$nodesize = nodesize$nodesize^(1/8) * node.size  # rescale to reduce the difference
nodesize
ref.labels = rep(c('A','B','C','D'), each=50)
labelmat = clusterings
plot_tree(labelmat=out$labelmat.mrtree, ref.labels=ref.labels, plot.piechart = TRUE)
ref.labels = rep(1:4, each=50)
plot_tree(labelmat=out$labelmat.mrtree, ref.labels=ref.labels, plot.piechart = TRUE)
as.numeric(as.character(1:4))
as.numeric(c('A','B'))
ref.labels = rep(as.character(1:4), each=50)
plot_tree(labelmat=out$labelmat.mrtree, ref.labels=ref.labels, plot.piechart = TRUE)
plot_tree(labelmat=out$labelmat.mrtree, ref.labels=ref.labels, plot.piechart = TRUE)
ref.labels = rep(c('A','B','C','1'), each=50)
plot_tree(labelmat=out$labelmat.mrtree, ref.labels=ref.labels, plot.piechart = TRUE)
as.numeric(unique(ref.labels))
any(!is.na(as.numeric(ref.labels))
)
as.numeric(ref.labels)
devtools::load_all()
ref.labels = rep(as.character(1:4), each=50)
plot_tree(labelmat=out$labelmat.mrtree,
ref.labels=ref.labels,
plot.piechart = TRUE)
plot_tree(labelmat=out$labelmat.mrtree,
ref.labels=NULL,
plot.piechart = FALSE)
expect_error(plot_tree(labelmat=out$labelmat.mrtree,
ref.labels=NULL,
plot.piechart = FALSE), NA)
ref.labels = rep("NA", nrow(labelmat))
show.ref.labels = F
draw.pie.chart = F
labelmat = clusterings
n = nrow(labelmat)
p = ncol(labelmat)
# save in data.tree format
labelmat = matrix(paste(matrix(rep(colnames(labelmat), each = n), nrow = n),
labelmat, sep = "-"), nrow = n)
if (is.null(colnames(labelmat))) {
ks = apply(labelmat, 2, function(x) length(unique(x)))
colnames(labelmat) = paste0("K", ks)
}
if (length(unique(colnames(labelmat)))!=ncol(labelmat)) {
# repeated colnames
colnames(labelmat) = paste0("layer", 1:ncol(labelmat))
prefix = "layer"
}
ref.labels = NULL
if (is.null(ref.labels)) {
ref.labels = rep("NA", nrow(labelmat))
show.ref.labels = F
draw.pie.chart = F
} else {
ref.labels = as.character(ref.labels)
ref.labels = gsub("-", "_", ref.labels)
check_numeric = as.numeric(ref.labels)
if (any(!is.na(check_numeric))){
ind = which(!is.na(check_numeric)) # entries with numeric label
ref.labels[ind] = paste0('C', ref.labels[ind])
}
}
label.order = sort(unique(ref.labels))
n = nrow(labelmat)
p = ncol(labelmat)
labelmat = clusterings
if (is.null(colnames(labelmat))) {
ks = apply(labelmat, 2, function(x) length(unique(x)))
colnames(labelmat) = paste0("K", ks)
}
ref.labels = NULL
if (is.null(ref.labels)) {
ref.labels = rep("NA", nrow(labelmat))
show.ref.labels = F
draw.pie.chart = F
} else {
ref.labels = as.character(ref.labels)
ref.labels = gsub("-", "_", ref.labels)
check_numeric = as.numeric(ref.labels)
if (any(!is.na(check_numeric))){
ind = which(!is.na(check_numeric)) # entries with numeric label
ref.labels[ind] = paste0('C', ref.labels[ind])
}
}
n = nrow(labelmat)
p = ncol(labelmat)
# save in data.tree format
labelmat = matrix(paste(matrix(rep(colnames(labelmat), each = n), nrow = n),
labelmat, sep = "-"), nrow = n)
df = as.data.frame(unique(labelmat), stringsAsFactors = F)
df$pathString = apply(df, 1, function(x) paste(c("all", x), collapse = "/"))
tree.datatree = data.tree::as.Node(df)
# phylo tree for visualization
tree.phylo = data.tree::as.phylo.Node(tree.datatree)
# reference type per node
ord = data.frame(node = 1:(ape::Ntip(tree.phylo) + ape::Nnode(tree.phylo)), row.names = c(tree.phylo$tip.label,
tree.phylo$node.label))
devtools::load_all()
expect_error(plot_tree(labelmat = clusterings,
ref.labels = ref.labels,
plot.piechart = TRUE),
'Not an hierarchical tree structure')
plot_tree(labelmat = clusterings,
ref.labels = ref.labels,
plot.piechart = TRUE)
devtools::load_all()
expect_error(plot_tree(labelmat = clusterings,
ref.labels = ref.labels,
plot.piechart = TRUE),
'Not an hierarchical tree structure')
help(suppressWarnings)
devtools::load_all()
expect_error(plot_tree(labelmat = clusterings,
ref.labels = ref.labels,
plot.piechart = TRUE),
'Not an hierarchical tree structure')
labelmat = out$labelmat.mrtree
if (is.null(colnames(labelmat))) {
ks = apply(labelmat, 2, function(x) length(unique(x)))
colnames(labelmat) = paste0("K", ks)
}
if (length(unique(colnames(labelmat)))!=ncol(labelmat)) {
# repeated colnames
colnames(labelmat) = paste0("layer", 1:ncol(labelmat))
prefix = "layer"
}
ref.labels = NULL
if (length(unique(colnames(labelmat)))!=ncol(labelmat)) {
# repeated colnames
colnames(labelmat) = paste0("layer", 1:ncol(labelmat))
prefix = "layer"
}
if (is.null(ref.labels)) {
ref.labels = rep("NA", nrow(labelmat))
show.ref.labels = F
draw.pie.chart = F
} else {
ref.labels = as.character(ref.labels)
ref.labels = gsub("-", "_", ref.labels)
if (any(is.na(ref.labels))){
ref.labels[is.na(ref.labels)] = 'NA'
}
check_numeric = suppressWarnings(as.numeric(ref.labels))
if (any(!is.na(check_numeric))){
ind = which(!is.na(check_numeric)) # entries with numeric label
ref.labels[ind] = paste0('C', ref.labels[ind])
}
}
n = nrow(labelmat)
p = ncol(labelmat)
# save in data.tree format
labelmat = matrix(paste(matrix(rep(colnames(labelmat), each = n), nrow = n),
labelmat, sep = "-"), nrow = n)
df = as.data.frame(unique(labelmat), stringsAsFactors = F)
df$pathString = apply(df, 1, function(x) paste(c("all", x), collapse = "/"))
tree.datatree = data.tree::as.Node(df)
# phylo tree for visualization
tree.phylo = data.tree::as.phylo.Node(tree.datatree)
# reference type per node
if (any(duplicated(c(tree.phylo$tip.label,tree.phylo$node.label)))){
stop('Not an hierarchical tree structure')
}
ord = data.frame(node = 1:(ape::Ntip(tree.phylo) + ape::Nnode(tree.phylo)),
row.names = c(tree.phylo$tip.label, tree.phylo$node.label))
df = data.frame(labelmat = c(labelmat), ref.labels = rep(ref.labels, p))
df = rbind(df, data.frame(labelmat = "all", ref.labels = ref.labels))
# calculate per type percentage
pct = aggregate(as.factor(df$ref.labels), by = list(node = df$labelmat), FUN = function(x) {
t = table(x)
t/sum(t)
})
pct
ref.labels = NULL
devtools::load_all()
plot_tree(labelmat = clusterings,
ref.labels = ref.labels,
plot.piechart = TRUE)
plot_tree(labelmat=out$labelmat.mrtree,
ref.labels=NULL,
plot.piechart = FALSE)
expect_error(plot_tree(labelmat=out$labelmat.mrtree,
ref.labels=NULL,
plot.piechart = TRUE), NA)
plot_tree(labelmat = out$labelmat.mrtree,
ref.labels = ref.labels,
plot.piechart = TRUE)
devtools::load_all()
plot_tree(labelmat=out$labelmat.mrtree,
ref.labels=NULL,
plot.piechart = FALSE)
plot_tree(labelmat=out$labelmat.mrtree,
ref.labels=NULL,
plot.piechart = TRUE)
ref.labels = rep(1:4, each=50)
expect_error(plot_tree(labelmat=out$labelmat.mrtree,
ref.labels=ref.labels,
plot.piechart = TRUE), NA)
plot_tree(labelmat=out$labelmat.mrtree,
ref.labels=ref.labels,
plot.piechart = TRUE)
devtools::load_all()
devtools::load_all()
plot_tree(labelmat = out$labelmat.mrtree,
ref.labels = ref.labels,
plot.piechart = TRUE)
devtools::load_all()
plot_tree(labelmat = out$labelmat.mrtree,
ref.labels = ref.labels,
plot.piechart = TRUE)
devtools::load_all()
plot_tree(labelmat = out$labelmat.mrtree,
ref.labels = ref.labels,
plot.piechart = TRUE)
suppressWarnings( plot_tree(labelmat = out$labelmat.mrtree,
ref.labels = ref.labels,
plot.piechart = TRUE))
suppressMessages( plot_tree(labelmat = out$labelmat.mrtree,
ref.labels = ref.labels,
plot.piechart = TRUE))
devtools::load_all()
plot_tree(labelmat = out$labelmat.mrtree,
ref.labels = ref.labels,
plot.piechart = TRUE)
devtools::load_all()
plot_tree(labelmat = out$labelmat.mrtree,
ref.labels = ref.labels,
plot.piechart = TRUE)
devtools::load_all()
plot_tree(labelmat = out$labelmat.mrtree,
ref.labels = ref.labels,
plot.piechart = TRUE)
# generat the hierarchical clustering structure
clusterings = matrix(NA, nrow=200, ncol=4)
clusterings[1:200, 1] = 1
clusterings[1:100, 2] = 1
clusterings[101:200, 2] = 2
clusterings[1:100, 3] = 1
clusterings[101:150, 3] = 2
clusterings[151:200, 3] = 3
clusterings[1:50, 4] = 1
clusterings[51:100, 4] = 2
clusterings[101:150, 4] = 3
clusterings[151:200, 4] = 4
# adding some random noise
clusterings[sample(10),2] = sample(1:2, 10, replace = TRUE)
clusterings[sample(10),3] = sample(1:3, 10, replace = TRUE)
clusterings[sample(10),4] = sample(1:4, 10, replace = TRUE)
ref.labels = rep(1:4, each=50)
out = mrtree(clusterings)
str()
expect_equal(nrow(clusterings), nrow(out$labelmat.mrtree))
expect_equal(nrow(clusterings), nrow(out$labelmat.flat))
expect_equal(ncol(clusterings), ncol(out$labelmat.flat))
nrow(out$labelmat.mrtree)
str(out)
expect_error(out = mrtree(clusterings), NA)
expect_equal(nrow(clusterings), nrow(out$labelmat.mrtree))
rm(list = ls())
# setup
set.seed(1)
#             ()
#       ()          ()
#       ()        ()  ()
#     ()  ()      ()  ()
# generat the hierarchical clustering structure
clusterings = matrix(NA, nrow=200, ncol=4)
clusterings[1:200, 1] = 1
clusterings[1:100, 2] = 1
clusterings[101:200, 2] = 2
clusterings[1:100, 3] = 1
clusterings[101:150, 3] = 2
clusterings[151:200, 3] = 3
clusterings[1:50, 4] = 1
clusterings[51:100, 4] = 2
clusterings[101:150, 4] = 3
clusterings[151:200, 4] = 4
# adding some random noise
clusterings[sample(10),2] = sample(1:2, 10, replace = TRUE)
clusterings[sample(10),3] = sample(1:3, 10, replace = TRUE)
clusterings[sample(10),4] = sample(1:4, 10, replace = TRUE)
ref.labels = rep(1:4, each=50)
str(clusterings)
as.data.frame(clusterings)
df = as.data.frame(clusterings)
colnames(df) = past0('K_', 1:4)
df$other = 1:nrow(clusterings)  # add an additional column
df = as.data.frame(clusterings)
colnames(df) = paste0('K_', 1:4)
df$other = 1:nrow(clusterings)  # add an additional column
str(df)
expect_error(mrtree(df, prefix = 'K_'), NA)
out = mrtree(df, prefix = 'K_')
str(out)
plot_tree(labelmat = clusterings,
ref.labels = ref.labels,
plot.piechart = TRUE)
plot_tree(labelmat=out$labelmat.mrtree,
ref.labels=ref.labels,
plot.piechart = TRUE)
expect_equal(nrow(clusterings), nrow(out$labelmat.mrtree))
expect_equal(nrow(clusterings), nrow(out$labelmat.flat))
expect_equal(ncol(clusterings), ncol(out$labelmat.flat))
cl = cbind(clusterings, clusterings)
# add some additional noise
sapply(1:ncol(cl), function(i){
cl[sample(10),i] = sample(1:length(unique(cl[,i])), 10, replace = TRUE)
})
cl = cbind(clusterings, clusterings)
# add some additional noise
for (i in 1:ncol(cl)){}
str(cl)
mrtree(df, consensus=TRUE)
expect_warning(mrtree(df), 'Prefix and suffix both missing, using all columns for constructing tree!')
devtools::load_all()
expect_warning(mrtree(df), 'Prefix and suffix both missing, using all columns for constructing tree!')
devtools::load_all()
expect_warning(mrtree(df), 'Prefix and suffix both missing, using all columns for constructing tree!')
help(expect_warning)
devtools::load_all()
expect_warning(mrtree(df), 'Prefix and suffix both missing, using all columns')
help("warnings")
help("warnings]")
help("warning")
expect_warning(mrtree(df), 'Prefix and suffix both missing')
mrtree(df)
devtools::load_all()
expect_warning(mrtree(df), 'Prefix and suffix both missing')
